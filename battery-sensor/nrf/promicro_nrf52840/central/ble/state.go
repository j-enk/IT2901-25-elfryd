package ble

import (
	"tinygo.org/x/bluetooth"
	"sync"
)

var(
	Adapter 	= bluetooth.DefaultAdapter
	conns		= make(map[bluetooth.Address]*GATTProfile)
	mu = sync.Mutex{}

	idUUID = 		bluetooth.NewUUID([16]byte{
						0x00, 0x00, 0x2C, 0x05,
						0x00, 0x00,
						0x10, 0x00,
						0x80, 0x00,
						0x00, 0x80,
						0x5F, 0x9B, 0x34, 0xFB,
					})
	filterUUID= 	[16]byte{
		0x00, 0x00, 0x2B, 0x18,
		0x00, 0x00,
		0x10, 0x00,
		0x80, 0x00,
		0x00, 0x80,
		0x5F, 0x9B, 0x34, 0xFB,
	}
	voltageUUID	=	[16]byte{
						0x00, 0x00, 0x2B, 0x18,
						0x00, 0x00,
						0x10, 0x00,
						0x80, 0x00,
						0x00, 0x80,
						0x5F, 0x9B, 0x34, 0xFB,
					}
	tempUUID = 		[16]byte{
						0x00, 0x00, 0x2A, 0x6E,
						0x00, 0x00,
						0x10, 0x00,
						0x80, 0x00,
						0x00, 0x80,
						0x5F, 0x9B, 0x34, 0xFB,
					}
	gyroUUID =		[16]byte{
						0x00, 0x00, 0x2F, 0x01,
						0x00, 0x00,
						0x10, 0x00,
						0x80, 0x00,
						0x00, 0x80,
						0x5F, 0x9B, 0x34, 0xFB,
					}
					enUUID =		[16]byte{
						0x00, 0x00, 0x2F, 0x01,
						0x00, 0x00,
						0x10, 0x00,
						0x80, 0x00,
						0x00, 0x80,
						0x5F, 0x9B, 0x34, 0xFB,
					}
					toUUID =		[16]byte{
						0x00, 0x00, 0x2F, 0x01,
						0x00, 0x00,
						0x10, 0x00,
						0x80, 0x00,
						0x00, 0x80,
						0x5F, 0x9B, 0x34, 0xFB,
					}
					trerUUID =		[16]byte{
						0x00, 0x00, 0x2F, 0x01,
						0x00, 0x00,
						0x10, 0x00,
						0x80, 0x00,
						0x00, 0x80,
						0x5F, 0x9B, 0x34, 0xFB,
					}
					fireUUID =		[16]byte{
						0x00, 0x00, 0x2F, 0x01,
						0x00, 0x00,
						0x10, 0x00,
						0x80, 0x00,
						0x00, 0x80,
						0x5F, 0x9B, 0x34, 0xFB,
					}

	ScanStop =		false
	BatteryArray = 	make(map[bluetooth.Address]BatteryMessage)
	//D9:A8:EC:EA:72:6B id = 	3
	//EC:0A:B5:04:71:7B id =	2
	//E9:46:77:D0:E3:05 id =	4
	//CA:6A:4C:BD:7C:36 id =	1
	// addrIDArray = 	make(map[bluetooth.Address]int8)

)

type GATTProfile struct{
	Device			bluetooth.Device
	Active			bool
	Address 		bluetooth.Address
	// ID				int8
	Services		map[string]*ServiceClient
}

type ServiceClient struct{
	UUID	bluetooth.UUID
	Chars	map[bluetooth.UUID]bluetooth.DeviceCharacteristic
}

type BatteryMessage struct{
	New			int8	//Flag for if data has been updated since last read (0: old, 1: new)
	ID			int8
	Payload 	[]byte
}

// GetBatteryArray safely returns a copy of BatteryArray
func GetBatteryArray() map[bluetooth.Address]BatteryMessage{
	mu.Lock()
	defer mu.Unlock()

	// Return a *copy* to avoid race conditions if caller modifies it
	copy := make(map[bluetooth.Address]BatteryMessage, len(BatteryArray))
	for addr, msg := range BatteryArray {
		copy[addr] = msg
	}
	return copy
}

// SetBatteryEntry safely sets or updates a BatteryMessage for a device
func SetBatteryEntry(addr bluetooth.Address, msg BatteryMessage) {
	mu.Lock()
	defer mu.Unlock()

	BatteryArray[addr] = msg
}
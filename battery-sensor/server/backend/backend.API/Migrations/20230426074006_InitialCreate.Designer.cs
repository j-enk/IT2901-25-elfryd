// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.API;

#nullable disable

namespace backend.API.Migrations
{
    [DbContext(typeof(LockBoxContext))]
    [Migration("20230426074006_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.7");

            modelBuilder.Entity("backend.API.Data.Models.Boat", b =>
                {
                    b.Property<long>("BoatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("boat_id");

                    b.Property<float>("AdvanceBookingLimit")
                        .HasColumnType("REAL")
                        .HasColumnName("advance_booking_limit");

                    b.Property<int>("ChargingTime")
                        .HasColumnType("INTEGER")
                        .HasColumnName("charging_time");

                    b.Property<long>("LockBoxID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lock_box_id");

                    b.Property<int>("MaxBookingLimit")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_booking_limit");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<float>("WeatherLimit")
                        .HasColumnType("REAL")
                        .HasColumnName("weather_limit");

                    b.HasKey("BoatID")
                        .HasName("pk_boats");

                    b.HasIndex("BoatID")
                        .IsUnique()
                        .HasDatabaseName("ix_boats_boat_id");

                    b.HasIndex("LockBoxID")
                        .HasDatabaseName("ix_boats_lock_box_id");

                    b.ToTable("boats", (string)null);
                });

            modelBuilder.Entity("backend.API.Data.Models.Booking", b =>
                {
                    b.Property<long>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("booking_id");

                    b.Property<long>("BoatID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("boat_id");

                    b.Property<DateTime>("ChargingDone")
                        .HasColumnType("TEXT")
                        .HasColumnName("charging_done");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT")
                        .HasColumnName("comment");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_time");

                    b.Property<DateTime?>("KeyReturnedTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("key_returned_time");

                    b.Property<DateTime?>("KeyTakenTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("key_taken_time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_time");

                    b.Property<char>("Status")
                        .HasColumnType("TEXT")
                        .HasColumnName("status");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<bool>("isOfficial")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_official");

                    b.HasKey("BookingID")
                        .HasName("pk_bookings");

                    b.HasIndex("BoatID")
                        .HasDatabaseName("ix_bookings_boat_id");

                    b.HasIndex("BookingID")
                        .IsUnique()
                        .HasDatabaseName("ix_bookings_booking_id");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_bookings_user_id");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("backend.API.Data.Models.BookingPeriod", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<long>("BoatID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("boat_id");

                    b.Property<int>("BookingCloses")
                        .HasColumnType("INTEGER")
                        .HasColumnName("booking_closes");

                    b.Property<int>("BookingOpens")
                        .HasColumnType("INTEGER")
                        .HasColumnName("booking_opens");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.HasKey("Name")
                        .HasName("pk_booking_periods");

                    b.HasIndex("BoatID")
                        .HasDatabaseName("ix_booking_periods_boat_id");

                    b.HasIndex("Name", "BoatID")
                        .IsUnique()
                        .HasDatabaseName("ix_booking_periods_name_boat_id");

                    b.ToTable("booking_periods", (string)null);
                });

            modelBuilder.Entity("backend.API.Data.Models.KeyEvent", b =>
                {
                    b.Property<long>("KeyEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_event_id");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER")
                        .HasColumnName("action");

                    b.Property<long?>("LockBoxID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lock_box_id");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("time_stamp");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("KeyEventID")
                        .HasName("pk_key_events");

                    b.HasIndex("KeyEventID")
                        .IsUnique()
                        .HasDatabaseName("ix_key_events_key_event_id");

                    b.HasIndex("LockBoxID")
                        .HasDatabaseName("ix_key_events_lock_box_id");

                    b.ToTable("key_events", (string)null);
                });

            modelBuilder.Entity("backend.API.Data.Models.KeyReport", b =>
                {
                    b.Property<long>("KeyReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("key_report_id");

                    b.Property<long?>("LockBoxID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lock_box_id");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("status");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("time_stamp");

                    b.HasKey("KeyReportID")
                        .HasName("pk_key_reports");

                    b.HasIndex("KeyReportID")
                        .IsUnique()
                        .HasDatabaseName("ix_key_reports_key_report_id");

                    b.HasIndex("LockBoxID")
                        .HasDatabaseName("ix_key_reports_lock_box_id");

                    b.ToTable("key_reports", (string)null);
                });

            modelBuilder.Entity("backend.API.Data.Models.LockBox", b =>
                {
                    b.Property<long>("LockBoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("lock_box_id");

                    b.Property<string>("Topic")
                        .HasColumnType("TEXT")
                        .HasColumnName("topic");

                    b.Property<bool>("isOpen")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_open");

                    b.Property<string>("lastInteractionUserID")
                        .HasColumnType("TEXT")
                        .HasColumnName("last_interaction_user_id");

                    b.HasKey("LockBoxID")
                        .HasName("pk_lock_boxes");

                    b.HasIndex("LockBoxID")
                        .IsUnique()
                        .HasDatabaseName("ix_lock_boxes_lock_box_id");

                    b.ToTable("lock_boxes", (string)null);
                });

            modelBuilder.Entity("backend.API.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend.API.Data.Models.Boat", b =>
                {
                    b.HasOne("backend.API.Data.Models.LockBox", "LockBox")
                        .WithMany("Boats")
                        .HasForeignKey("LockBoxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_boats_lock_boxes_lock_box_id");

                    b.Navigation("LockBox");
                });

            modelBuilder.Entity("backend.API.Data.Models.Booking", b =>
                {
                    b.HasOne("backend.API.Data.Models.Boat", "Boat")
                        .WithMany("Bookings")
                        .HasForeignKey("BoatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bookings_boats_boat_id");

                    b.HasOne("backend.API.Data.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_bookings_user_user_id");

                    b.Navigation("Boat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.API.Data.Models.BookingPeriod", b =>
                {
                    b.HasOne("backend.API.Data.Models.Boat", "Boat")
                        .WithMany("BookingPeriods")
                        .HasForeignKey("BoatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_booking_periods_boats_boat_id");

                    b.Navigation("Boat");
                });

            modelBuilder.Entity("backend.API.Data.Models.KeyEvent", b =>
                {
                    b.HasOne("backend.API.Data.Models.LockBox", "LockBox")
                        .WithMany()
                        .HasForeignKey("LockBoxID")
                        .HasConstraintName("fk_key_events_lock_boxes_lock_box_id");

                    b.Navigation("LockBox");
                });

            modelBuilder.Entity("backend.API.Data.Models.KeyReport", b =>
                {
                    b.HasOne("backend.API.Data.Models.LockBox", "LockBox")
                        .WithMany()
                        .HasForeignKey("LockBoxID")
                        .HasConstraintName("fk_key_reports_lock_boxes_lock_box_id");

                    b.Navigation("LockBox");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.API.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.API.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("backend.API.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.API.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("backend.API.Data.Models.Boat", b =>
                {
                    b.Navigation("BookingPeriods");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("backend.API.Data.Models.LockBox", b =>
                {
                    b.Navigation("Boats");
                });

            modelBuilder.Entity("backend.API.Data.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
